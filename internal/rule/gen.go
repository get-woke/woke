package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
	"sort"
	"strings"
	"text/template"

	"github.com/get-woke/woke/pkg/rule"

	"gopkg.in/yaml.v2"
)

func main() {
	var configFile, outFile string
	flag.StringVar(&configFile, "config", "", "Config file containing rules")
	flag.StringVar(&outFile, "outfile", "", "File to write generated rules to.")
	flag.Parse()

	if len(configFile) == 0 || len(outFile) == 0 {
		_panic(fmt.Errorf("config and outfile both required"))
	}

	yamlFile, err := ioutil.ReadFile(configFile)
	_panic(err)
	var cfg struct {
		Rules []rule.Rule `yaml:"rules"`
	}
	_panic(yaml.Unmarshal(yamlFile, &cfg))

	sort.Slice(cfg.Rules, func(i, j int) bool {
		return cfg.Rules[i].Name < cfg.Rules[j].Name
	})

	f, err := os.Create(outFile)
	_panic(err)
	defer f.Close()

	err = packageTemplate.Execute(f, struct {
		Rules []rule.Rule
	}{
		Rules: cfg.Rules,
	})
	_panic(err)
}

func _panic(err error) {
	if err != nil {
		panic(err)
	}
}

func sanitize(name string) string {
	re := regexp.MustCompile("[^a-zA-Z0-9]+")

	// try to turn any rule name into a go variable name
	replaced := re.ReplaceAllString(name, "_")
	split := strings.Split(replaced, "_")
	out := make([]string, len(split))
	for i := range split {
		out[i] = strings.Title(split[i])
	}

	return strings.Join(out, "")
}

var funcMap = template.FuncMap{"sanitize": sanitize}

var packageTemplate = template.Must(template.New("").
	Funcs(funcMap).
	Parse(`// Code generated by internal/rule/gen.go; DO NOT EDIT.
// Regenerate with 'go generate ./...'

package rule

{{ range .Rules }}
// {{ .Name | sanitize }}Rule is the default rule for "{{ .Name }}"
var {{ .Name | sanitize }}Rule = Rule{
	Name: "{{ .Name }}",
	Terms: {{ printf "%#v" .Terms }},
	Alternatives: {{ printf "%#v" .Alternatives }},
	{{- if .Note }}
	Note: "{{ .Note }}",
	{{- end }}
	{{- if .Severity }}
	Severity: {{ printf "%#v" .Severity }},
	{{- end }}
	Options: Options{
		WordBoundary: {{ .Options.WordBoundary }},
	},
}
{{- end }}

// DefaultRules are the default rules always used
var DefaultRules = []*Rule{
{{- range .Rules }}
	&{{ .Name | sanitize }}Rule,
{{- end }}
}
`))
